// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Newbie.Repositories.Models;

#nullable disable

namespace Newbie.Repositories.Data
{
    public partial class NewbiedbContext : DbContext
    {
        public NewbiedbContext()
        {
        }

        public NewbiedbContext(DbContextOptions<NewbiedbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<Authorization> Authorizations { get; set; }
        public virtual DbSet<MembersPrivate> MembersPrivates { get; set; }
        public virtual DbSet<MembersPublic> MembersPublics { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleArticle> RoleArticles { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseMySql("server=127.0.0.1;user id=root;password=0968983737;database=newbiedb", Microsoft.EntityFrameworkCore.ServerVersion.Parse("10.6.5-mariadb"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasCharSet("latin1")
                .UseCollation("latin1_swedish_ci");

            modelBuilder.Entity<Article>(entity =>
            {
                entity.Property(e => e.ArticleId).ValueGeneratedNever();

                entity.Property(e => e.Author)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");

                entity.Property(e => e.Content)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");

                entity.Property(e => e.Title)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");
            });

            modelBuilder.Entity<Authorization>(entity =>
            {
                entity.Property(e => e.AuthorizationId).ValueGeneratedNever();

                entity.Property(e => e.Roles)
                    .IsFixedLength(true)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");
            });

            modelBuilder.Entity<MembersPrivate>(entity =>
            {
                entity.Property(e => e.MembersprivateId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MembersPublic>(entity =>
            {
                entity.Property(e => e.MemberspublicId).ValueGeneratedNever();

                entity.Property(e => e.Accountname)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");

                entity.Property(e => e.Firstname)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");

                entity.Property(e => e.Intro)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");

                entity.Property(e => e.Lastname)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");

                entity.Property(e => e.Nickname)
                    .UseCollation("utf8mb3_general_ci")
                    .HasCharSet("utf8mb3");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.RoleId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RoleArticle>(entity =>
            {
                entity.Property(e => e.RolearticleId).ValueGeneratedNever();

                entity.HasOne(d => d.Authorization)
                    .WithMany(p => p.RoleArticles)
                    .HasForeignKey(d => d.AuthorizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("role_article_ibfk_1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}